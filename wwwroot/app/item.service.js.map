{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","Observable_1","ItemService","http","this","baseUrl","prototype","getLastest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","add","item","post","JSON","stringify","getRequestOptions","update","Id","put","delete","RequestOptions","headers","Headers","Content-Type","error","console","Observable","throw","__decorate","Injectable","exports"],"mappings":"wmBAAAA,OAAAC,QAA2B,iBAC3BC,OAAAD,QAAwD,iBACxDE,aAAAF,QAA2B,mBAK3BG,YAAA,WAGI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFZC,KAAAC,QAAU,aA2FtB,MAvFIH,aAAAI,UAAAC,WAAA,SAAWC,KACP,GAAIC,KAAML,KAAKC,QAAU,aAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KACTE,IAAI,SAAAC,UAAY,MAAQA,UAASC,SACjCC,MAAMV,KAAKW,cAG3Bb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KACTE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAG3Bb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KACTE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAI3Bb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIV,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAKO,IAAID,KACTE,IAAI,SAAAC,UAAY,MAAMA,UAASC,SAC/BC,MAAMV,KAAKW,cAQ3Bb,YAAAI,UAAAc,IAAA,SAAIC,MACA,GAAIZ,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKmB,KAAKb,IAAKc,KAAKC,UAAUH,MAClCjB,KAAKqB,qBACRd,IAAI,SAAAC,UAAY,MAAMA,UAASC,SAC/BC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAoB,OAAA,SAAOL,MACH,GAAIZ,KAAML,KAAKC,QAAUgB,KAAKM,EAC9B,OAAOvB,MAAKD,KAAKyB,IAAInB,IAAKc,KAAKC,UAAUH,MACjCjB,KAAKqB,qBACRd,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAQpBb,YAAAI,UAAAuB,OAAA,SAAOX,IACH,GAAIT,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAK0B,OAAOpB,KACnBK,MAAMV,KAAKW,cAOZb,YAAAI,UAAAmB,kBAAR,WACI,MAAO,IAAIzB,QAAA8B,gBACPC,QAAS,GAAI/B,QAAAgC,SACTC,eAAgB,wBAUpB/B,YAAAI,UAAAS,YAAR,SAAoBmB,OAEhB,MADAC,SAAQD,MAAMA,OACPjC,aAAAmC,WAAWC,MAAMH,MAAMrB,OAAOqB,OAAS,iBA3FtDhC,YAAAoC,YAACxC,OAAAyC,2EACYC,SAAAtC,YAAWA","file":"item.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { Item } from './item';\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    private baseUrl = 'api/items/';\r\n\r\n    constructor(private http: Http) { }\r\n\r\n    getLastest(num?: number): Observable<Item[]> {\r\n        let url = this.baseUrl + 'GetLastest/';\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n                   .map(response => <Item[]>response.json())\r\n                   .catch(this.handleError);\r\n    }\r\n\r\n    getMostViewed(num?: number): Observable<Item[]> {\r\n        let url = this.baseUrl + 'GetMostViewed/';\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n                   .map(response => response.json())\r\n                   .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?: number): Observable<Item[]> {\r\n        let url = this.baseUrl + 'GetRandom/';\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n                   .map(response => response.json())\r\n                   .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\r\n    get(id: number): Observable<Item> {\r\n        if (id == null) { throw new Error('id is required.'); }\r\n        let url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n                   .map(response => <Item>response.json())\r\n                   .catch(this.handleError);\r\n    }\r\n\r\n    /**\r\n     * calls the [POST] /api/items/ Web API method to add a new item.\r\n     * @param {Item} item\r\n     * @returns {Observable<Item>} 傳回新增成功的 Item\r\n     */\r\n    add(item: Item): Observable<Item> {\r\n        let url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(item),\r\n                this.getRequestOptions())\r\n            .map(response => <Item>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/items/ Web API method to update a existing item.\r\n    update(item: Item) {\r\n        let url = this.baseUrl + item.Id;\r\n        return this.http.put(url, JSON.stringify(item),\r\n                this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    /**\r\n     * calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\r\n     * @param {number} id\r\n     * @returns\r\n     */\r\n    delete(id: number) {\r\n        let url = this.baseUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    /**\r\n     * Generate request headers\r\n     * @returns Headers: application/json\r\n     */\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 處理錯誤訊息，主要在 console.log 中紀錄\r\n     * @param {Response} error\r\n     * @returns Observable.throw error message\r\n     */\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n}\r\n"]}