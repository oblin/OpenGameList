{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,sBAAmD,gBAAgB,CAAC,CAAA;AACpE,uBAAuB,iBAAiB,CAAC,CAAA;AACzC,6BAA4B,gBAAgB,CAAC,CAAA;AAO7C;IAMI,wBAAoB,EAAe,EACvB,MAAc,EACd,WAAwB;QAFhB,OAAE,GAAF,EAAE,CAAa;QACvB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;QAPpC,UAAK,GAAG,OAAO,CAAC;QAEhB,eAAU,GAAG,KAAK,CAAC;QACnB,2BAAsB,GAAG,IAAI,CAAC,CAAE,sBAAsB;IAIf,CAAC;IAExC,iCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC3B,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAE;YACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAE;SACvC,CAAC,CAAC;IACP,CAAC;IAED,qCAAY,GAAZ,UAAa,CAAC;QAAd,iBAgBC;QAfG,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;aACrC,SAAS,CACN,UAAC,IAAI;YACD,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,CAAC,EACD,UAAC,GAAG;YACA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3B,CAAC,CACJ,CAAC;QACN,+CAA+C;IACnD,CAAC;IAED,mCAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,0CAAiB,GAAjB,UAAkB,YAAoB;QAClC,IAAI,GAAG,GAAG,6BAA6B,GAAG,YAAY,CAAC;QACvD,qCAAqC;QACrC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;QACrD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;QACrD,IAAI,MAAM,GAAG,oDAAkD,CAAC,gBAAW,CAAG,CAAC;QAC/E,2CAA2C;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,sBAAsB;YACvB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;IAvDL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,OAAO;YACjB,WAAW,EAAE,iCAAiC;SACjD,CAAC;;sBAAA;IAqDF,qBAAC;AAAD,CApDA,AAoDC,IAAA;AApDY,sBAAc,iBAoD1B,CAAA","file":"login.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { UserEditComponent } from './user-edit.component';\r\n\r\n@Component({\r\n    selector: 'login',\r\n    templateUrl: './template/login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    title = 'Login';\r\n    loginForm: FormGroup;\r\n    loginError = false;\r\n    externalProviderWindow = null;  // 必須要是 public 讓外部可以呼叫\r\n\r\n    constructor(private fb: FormBuilder,\r\n        private router: Router,\r\n        private authService: AuthService) {}\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.fb.group({\r\n            username: ['', Validators.required ],\r\n            password: ['', Validators.required ]\r\n        });\r\n    }\r\n\r\n    performLogin(e) {\r\n        e.preventDefault();\r\n        let username = this.loginForm.value.username;\r\n        let password = this.loginForm.value.password;\r\n        this.authService.login(username, password)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.loginError = false;\r\n                    this.router.navigate(['']);\r\n                },\r\n                (err) => {\r\n                    console.log(err);\r\n                    this.loginError = true;\r\n                }\r\n            );\r\n        // alert(JSON.stringify(this.loginForm.value));\r\n    }\r\n\r\n    onRegister() {\r\n        this.router.navigate(['register']);\r\n    }\r\n\r\n    callExternalLogin(providerName: string) {\r\n        let url = 'api/Accounts/ExternalLogin/' + providerName;\r\n        // minialistic mobile devices support\r\n        let w = (screen.width >= 1050) ? 1050 : screen.width;\r\n        let h = (screen.height >= 550) ? 550 : screen.height;\r\n        let params = `toolbar=yes,scrollbars=yes,resizable=yes,width=${w},height=${h}`;\r\n        // close previously opened windows (if any)\r\n        if (this.externalProviderWindow) {\r\n            this.externalProviderWindow.close();\r\n        }\r\n        this.externalProviderWindow =\r\n            window.open(url, 'ExternalProvider', params, false);\r\n    }\r\n}\r\n"]}