{"version":3,"sources":["app.component.ts"],"names":["core_1","require","router_1","auth_service_1","AppComponent","router","authService","zone","this","title","window","externalProviderLogin","self_1","auth","run","prototype","isActive","link","createUrlTree","logout","_this","subscribe","result","navigate","setAuth","console","log","getAuth","providerName","ngOnInit","expires_in","startupTokenRefresh","__decorate","Component","selector","templateUrl","exports"],"mappings":"wmBAAAA,OAAAC,QAA0C,iBAC1CC,SAAAD,QAAuB,mBAEvBE,eAAAF,QAA4B,kBAM5BG,aAAA,WAGI,QAAAA,cAAoBC,OACRC,YACDC,MACP,GAHgBC,KAAAH,OAAAA,OACRG,KAAAF,YAAAA,YACDE,KAAAD,KAAAA,KAJXC,KAAAC,MAAQ,gBAKOC,OAAQC,sBAAuB,CACtC,GAAIC,QAAOJ,IACLE,QAAQC,sBAAwB,SAAUE,MAC5CD,OAAKL,KAAKO,IAAI,WACVF,OAAKD,sBAAsBE,UA0C/C,MAhCIT,cAAAW,UAAAC,SAAA,SAASC,MAEL,MAAOT,MAAKH,OAAOW,SAEfR,KAAKH,OAAOa,cAAcD,OAAO,IAGzCb,aAAAW,UAAAI,OAAA,WAAA,GAAAC,OAAAZ,IAOI,OALAA,MAAKF,YAAYa,SAASE,UAAU,SAAAC,QAC5BA,QACAF,MAAKf,OAAOkB,UAAU,QAGvB,GAGXnB,aAAAW,UAAAJ,sBAAA,SAAsBE,MAClBL,KAAKF,YAAYkB,QAAQX,MACzBY,QAAQC,IAAI,wCAAwClB,KAAKF,YAAYqB,UAAUC,cAC/EpB,KAAKH,OAAOkB,UAAU,MAI1BnB,aAAAW,UAAAc,SAAA,WACIJ,QAAQC,IAAI,6BACZ,IAAIb,MAAOL,KAAKF,YAAYqB,SAExBd,OAAQA,KAAKiB,YACbtB,KAAKF,YAAYyB,uBArD7B3B,aAAA4B,YAAChC,OAAAiC,WACGC,SAAU,eACVC,YAAa,8IAEJC,SAAAhC,aAAYA","file":"app.component.js","sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n    selector: 'opengamelist',\r\n    templateUrl: './template/app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n    title = 'OpenGameList';\r\n\r\n    constructor(private router: Router,\r\n        private authService: AuthService,\r\n        public zone: NgZone) {\r\n        if (!(<any>window).externalProviderLogin) {\r\n            let self = this;\r\n            (<any>window).externalProviderLogin = function (auth) {\r\n                self.zone.run(() => {\r\n                    self.externalProviderLogin(auth);\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判斷傳入的資料組合是否是目前的 url\r\n     * @param {any[]} ex: ['item/edit', 0], ['login'] \r\n     */\r\n    isActive(link: any[]): boolean {\r\n        // 利用 router.isActive(url) 判斷是否是目前的 url \r\n        return this.router.isActive(\r\n            // 使用 ['item/edit', 0] 組合成目前的 url\r\n            this.router.createUrlTree(link), true);\r\n    }\r\n\r\n    logout(): boolean {\r\n        // logout current user, then redirect to welcome view\r\n        this.authService.logout().subscribe(result => {\r\n            if (result) {\r\n                this.router.navigate(['']);\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    externalProviderLogin(auth: any) {\r\n        this.authService.setAuth(auth);\r\n        console.log(`External Login successful! Provider: ${this.authService.getAuth().providerName}`);\r\n        this.router.navigate(['']);\r\n    }\r\n\r\n    // TODO: 加入顯示登入的使用者 DisplayName\r\n    ngOnInit() {\r\n        console.log('App Component is start....');\r\n        let auth = this.authService.getAuth();\r\n        // 檢查是 local login (with expires_in) 則進行 token refresh\r\n        if (auth && auth.expires_in) {\r\n            this.authService.startupTokenRefresh();\r\n        }\r\n    }\r\n}\r\n"]}